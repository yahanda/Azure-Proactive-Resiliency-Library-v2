- description: コードとしてのインフラストラクチャとの一貫性を確保するために手動構成を回避する
  aprlGuid: 6bf9e5d5-fe57-c647-8daa-4903770e1302
  recommendationTypeId: null
  recommendationControl: Automation
  recommendationImpact: Medium
  recommendationResourceType: WellArchitected/Deploy
  recommendationMetadataState: Active
  longDescription: |-
    コードとしてのインフラストラクチャ (IaC) は、DevOps 手法と記述モデルによるバージョン管理を使用して、ネットワーク、仮想マシン、ロード バランサー、接続トポロジなどのインフラストラクチャを定義およびデプロイします。同じソース コードから常に同じバイナリが生成されるのと同じように、IaC モデルはデプロイするたびに同じ環境を生成します。

    IaC は重要な DevOps プラクティスであり、継続的デリバリーのコンポーネントです。 IaC を使用すると、DevOps チームは統一されたプラクティスとツールのセットを使用して連携して、アプリケーションとそのサポート インフラストラクチャを迅速かつ確実に大規模に提供できます。

    キーポイント：
    - 一貫性を確保するために手動構成を避ける
    - 安定したテスト環境を大規模かつ迅速に提供
    - 宣言型定義ファイルを使用する
  potentialBenefits: Ensures consistent, scalable deployments
  pgVerified: true
  publishedToLearn: false
  publishedToAdvisor: false
  automationAvailable: No
  tags: null
  learnMoreLink:
    - name: Avoid manual configuration to enforce consistency
      url: "https://learn.microsoft.com/devops/deliver/what-is-infrastructure-as-code#avoid-manual-configuration-to-enforce-consistency"
- description: 開発環境でのすべての変更を実稼働環境に適用する前に検証しました。
  aprlGuid: e42e646c-7d67-dd4b-96dc-16a3439fa030
  recommendationTypeId: null
  recommendationControl: Automation
  recommendationImpact: Medium
  recommendationResourceType: WellArchitected/Deploy
  recommendationMetadataState: Active
  longDescription: |-
    価値を継続的に提供することは、組織にとって必須の要件となっています。エンドユーザーに価値を提供するには、エラーなく継続的にリリースする必要があります。

    継続的デリバリー (CD) は、ビルド、テスト、構成、およびビルドから実稼働環境へのデプロイメントを自動化するプロセスです。

    リリース パイプラインでは、複数のテスト環境またはステージング環境を作成して、インフラストラクチャの作成を自動化し、新しいビルドをデプロイできます。後続の環境では、統合、負荷、およびユーザー受け入れテストの長期実行アクティビティが徐々にサポートされます。
  potentialBenefits: Ensures error-free releases
  pgVerified: true
  publishedToLearn: false
  publishedToAdvisor: false
  automationAvailable: No
  tags: null
  learnMoreLink:
    - name: Safe deployment practices
      url: "https://learn.microsoft.com/devops/operate/safe-deployment-practices"
- description: 使用される展開方法が信頼性戦略に沿っていることを確認する
  aprlGuid: e067b48e-7f91-40d9-bed9-bccac945417a
  recommendationTypeId: null
  recommendationControl: Automation
  recommendationImpact: Medium
  recommendationResourceType: WellArchitected/Deploy
  recommendationMetadataState: Active
  longDescription: |-
    信頼性のもう 1 つの側面は、ワークロードの更新またはロールバックに使用されるデプロイメント方法です。使用する展開方法が信頼性戦略に適合しており、ワークロードの可用性とパフォーマンスの要件をサポートしていることを確認する必要があります。たとえば、軽減したいリスクと影響のレベルに応じて、Blue-Green デプロイメント、カナリア デプロイメント、またはローリング デプロイメントの使用を選択できます。また、変更をデプロイする際には速度と安全性の間のトレードオフを考慮し、適切なテストおよび検証方法を使用してコードと構成の品質を確保する必要があります。さらに、展開の失敗に対処するための明確で文書化されたプロセスを用意し、変更や問題があれば関係者やお客様に伝える必要があります。
  potentialBenefits: Ensure deployment strategy satisfies reliability requirements
  pgVerified: true
  publishedToLearn: false
  publishedToAdvisor: false
  automationAvailable: No
  tags: null
  learnMoreLink:
    - name: Deployment and testing for mission-critical workloads on Azure
      url: "https://learn.microsoft.com/ja-jp/azure/well-architected/mission-critical/mission-critical-deployment-testing"
    - name: Safe deployment practices
      url: "https://learn.microsoft.com/devops/operate/safe-deployment-practices"
- description: 導入時に完全なテストスイートを実装する
  aprlGuid: e435d7c1-afd7-4350-9130-b410482df2b9
  recommendationTypeId: null
  recommendationControl: Automation
  recommendationImpact: Medium
  recommendationResourceType: WellArchitected/Deploy
  recommendationMetadataState: Active
  longDescription: |-
    導入のさまざまな段階でクラウド ソリューションをテストすると、ソリューションの品質と信頼性が向上し、本番環境でのコストが高く損害を与えるインシデントのリスクを軽減できます。 「シフトレフト」アプローチを採用することで、単体テスト、スモーク テスト、ロード テスト、カオス テストを実行して、ソリューションの機能、統合、パフォーマンス、スケーラビリティ、復元力、耐障害性を検証できます。これらのテストは、お客様やユーザーに影響を与える前に、問題やバグを特定して修正するのに役立ちます。
  potentialBenefits: Code has been extensively tested during build process
  pgVerified: true
  publishedToLearn: false
  publishedToAdvisor: false
  automationAvailable: No
  tags: null
  learnMoreLink:
    - name: Deployment and testing for mission-critical workloads on Azure
      url: "https://learn.microsoft.com/ja-jp/azure/well-architected/mission-critical/mission-critical-deployment-testing"
- description: 障害シナリオが定期的にテストされるようにする
  aprlGuid: 59f2b6c5-a7ba-422a-aa52-eb1380e9a22b
  recommendationTypeId: null
  recommendationControl: Automation
  recommendationImpact: Medium
  recommendationResourceType: WellArchitected/Deploy
  recommendationMetadataState: Active
  longDescription: |-
    障害シナリオとは、内部または外部の要因により、クラウド ソリューションが期待どおりに動作しない、またはサービス レベル目標 (SLO) を満たさない可能性がある状況です。たとえば、障害シナリオには、ハードウェア障害、ネットワーク停止、セキュリティ違反、構成エラー、需要の予期せぬ急増、サードパーティ サービスへの依存などが含まれる場合があります。これらのシナリオを定期的にテストすると、ソリューションに対する障害の影響を評価し、障害を軽減するための緊急時対応計画を準備するのに役立ちます。フォールト インジェクション、災害復旧訓練、ゲームデー、カオス エンジニアリングなどのツールや手法を使用して、制御された環境で障害シナリオをシミュレートおよびテストできます。
  potentialBenefits: Gain confidence that your application can handle failure scenarios correctly
  pgVerified: true
  publishedToLearn: false
  publishedToAdvisor: false
  automationAvailable: No
  tags: null
  learnMoreLink:
    - name: Deployment and testing for mission-critical workloads on Azure
      url: "https://learn.microsoft.com/ja-jp/azure/well-architected/mission-critical/mission-critical-deployment-testing"
- description: リージョンフェイルオーバーを定期的にテストする
  aprlGuid: 770dbc38-bd28-4669-83a5-81f1a49b682b
  recommendationTypeId: null
  recommendationControl: Automation
  recommendationImpact: Medium
  recommendationResourceType: WellArchitected/Deploy
  recommendationMetadataState: Active
  longDescription: |-
    リージョン フェールオーバーは、クラウド ソリューションのプライマリ リージョンで大規模な中断または停止が発生した場合に、セカンダリ リージョンに切り替えるプロセスです。リージョン フェールオーバーは、さまざまな地理的領域にわたってソリューションの可用性とパフォーマンスを維持するのに役立ちます。ただし、リージョン フェイルオーバーは簡単ではなく、慎重な計画とテストが必要です。定期的にリージョン フェールオーバーをテストして、バックアップ リージョンがソリューションの負荷と機能を処理できること、データがリージョン間で一貫性があり安全であること、フェールオーバーとフェールバックの手順が期待どおりに機能していることを確認する必要があります。リージョン フェールオーバーをテストすることは、ユーザーやお客様に影響を与える前に、フェールオーバー戦略の潜在的な問題やギャップを特定して解決するのにも役立ちます。
  potentialBenefits: Gain confidence that your application can handle regional failovers correctly
  pgVerified: true
  publishedToLearn: false
  publishedToAdvisor: false
  automationAvailable: No
  tags: null
  learnMoreLink:
    - name: Deployment and testing for mission-critical workloads on Azure
      url: "https://learn.microsoft.com/ja-jp/azure/well-architected/mission-critical/mission-critical-deployment-testing"
- description: 停止中にフェイルオーバーの自動化を確実に利用できるようにする
  aprlGuid: 0b0893f6-7c47-4580-83b2-ff6711ac8406
  recommendationTypeId: null
  recommendationControl: Automation
  recommendationImpact: Medium
  recommendationResourceType: WellArchitected/Deploy
  recommendationMetadataState: Active
  longDescription: |-
    信頼性の高いフェイルオーバー戦略の重要な側面の 1 つは自動化です。自動化により、停止中のセカンダリ リージョンへの切り替えに伴う人的エラー、遅延、複雑さを軽減できます。ただし、特に停止の影響を受けるコンポーネントやサービスに依存している場合、自動化自体が障害や中断に対して脆弱になる可能性があります。したがって、フェイルオーバーの自動化が利用可能であり、停止時にも回復力があること、および手動介入なしでフェイルオーバーの自動化をトリガーできることを確認する必要があります。また、フェイルオーバー自動化を定期的に監視およびテストして、さまざまなシナリオや条件下で期待どおりに機能することを確認する必要があります。たとえば、潜在的なリージョン停止の軽減策としてリージョン フェールオーバーを使用している場合、バックアップ リージョンへのフェールオーバーを調整するために使用される自動化は、停止が発生するリージョンでホストされるべきではありません。ワークロードの運用環境が含まれていないリージョンでオートメーションをホストすることを検討してください。
  potentialBenefits: Gain confidence in your failover automation being available during outages
  pgVerified: true
  publishedToLearn: false
  publishedToAdvisor: false
  automationAvailable: No
  tags: null
  learnMoreLink:
    - name: Deployment and testing for mission-critical workloads on Azure
      url: "https://learn.microsoft.com/ja-jp/azure/well-architected/mission-critical/mission-critical-deployment-testing"
