- description: 適切なパターンを使用して発信接続を管理する
  aprlGuid: 7ffd4456-d121-4cdb-a776-29762e1bff8d
  recommendationTypeId: null
  recommendationControl: Scalability
  recommendationImpact: Medium
  recommendationResourceType: WellArchitected/Develop
  recommendationMetadataState: Active
  longDescription: |-
    発信接続は、クラウド ソリューションがデータベース、API、サードパーティ プロバイダーなどの外部サービスまたはリソースに対して行うリクエストです。これらの接続を適切に管理することは、ソリューションの信頼性とパフォーマンスを確保するために非常に重要です。リクエストのタイプと頻度に応じて、発信接続のオープン、クローズ、再利用、プールに適切なパターンを使用する必要があります。たとえば、サーキット ブレーカー パターンを使用して、ソリューションが障害が発生したサービスに対して繰り返しリクエストを行うことを防止したり、接続プーリングを使用して既存の接続を再利用し、新しい接続を作成するオーバーヘッドを削減したりできます。さらに、依存関係の注入やファクトリー パターンなどのパターンを使用してコード内の接続オブジェクトを管理し、使用しなくなった接続を確実に閉じてポートの枯渇を防ぐことができます。
  potentialBenefits: Increase the application's ability to manage outgoing connections at scale
  pgVerified: false
  publishedToLearn: false
  publishedToAdvisor: no
  automationAvailable: no
  tags: null
  learnMoreLink:
    - name: Using dependency injection in .NET
      url: "https://learn.microsoft.com/dotnet/core/extensions/dependency-injection-usage"
    - name: Use IHttpClientFactory to implement resilient HTTP requests
      url: "https://learn.microsoft.com/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests"
- description: 発信接続が失敗することが予想される
  aprlGuid: 4d03e777-bc01-4a35-b23c-92cfd4f218be
  recommendationTypeId: null
  recommendationControl: High Availability
  recommendationImpact: Medium
  recommendationResourceType: WellArchitected/Develop
  recommendationMetadataState: Active
  longDescription: |-
    クラウド コンピューティングの主な課題の 1 つは、ネットワーク通信の不確実性と予測不可能性に対処しなければならないことです。発信接続は、ネットワークの輻輳、タイムアウト、サービスの停止、構成エラーなど、さまざまな理由で失敗する可能性があります。これらの障害が発生することを予期し、それらを適切に処理するようにソリューションを設計する必要があります。たとえば、再試行、フォールバック、タイムアウトなどのパターンを使用して一時的な障害から回復したり、バルクヘッドやキューベースの負荷平準化などのパターンを使用して、システムに対する障害の影響を分離して管理したりできます。発信接続の障害を予測して処理することで、クラウド ソリューションの復元力と可用性を向上させることができます。
  potentialBenefits: Increase the application's outgoing connection reliability
  pgVerified: false
  publishedToLearn: false
  publishedToAdvisor: no
  automationAvailable: no
  tags: null
  learnMoreLink:
    - name: Architecture Center - Retry Patterns
      url: "https://learn.microsoft.com/ja-jp/azure/architecture/patterns/retry"
- description: インフラストラクチャが発信接続の数をサポートできることを確認する
  aprlGuid: f1993b50-61a0-4206-8215-c43e3fd61500
  recommendationTypeId: null
  recommendationControl: Scalability
  recommendationImpact: High
  recommendationResourceType: WellArchitected/Develop
  recommendationMetadataState: Active
  longDescription: |-
    発信接続は、ネットワーク パス上のさまざまなコンポーネントを経由して宛先に到達します。これらのコンポーネントには、ゲートウェイ、プロキシ、ファイアウォール、その他のアプライアンスに加え、Azure NAT ゲートウェイや送信接続をスケーリングするその他の手段が含まれます。これらのコンポーネントが、少なくとも予想される送信トラフィック量まで拡張できることを確認してください。
  potentialBenefits: Increase the application's outgoing connection Scalability
  pgVerified: false
  publishedToLearn: false
  publishedToAdvisor: no
  automationAvailable: no
  tags: null
  learnMoreLink:
    - name: Ensure zone resilient outbound connectivity with NAT gateway
      url: "https://azure.microsoft.com/blog/ensure-zone-resilient-outbound-connectivity-with-nat-gateway/"
- description: 部分的な障害を処理するコーディング パターンを実装する
  aprlGuid: d70e7d1f-b956-40da-b8f2-19378ab61b63
  recommendationTypeId: null
  recommendationControl: High Availability
  recommendationImpact: Medium
  recommendationResourceType: WellArchitected/Develop
  recommendationMetadataState: Active
  longDescription: |-
    分散システムでは部分的な障害が避けられず、他のコンポーネントは機能し続けているにもかかわらず、一部のコンポーネントが障害を起こしたり使用できなくなったりすることがあります。したがって、クラウド ソリューションでは、部分的な障害を適切に処理し、システム全体の中断を回避するパターンを実装する必要があります。これらのパターンには、指数バックオフを使用して失敗した操作を再試行すること、タイムアウトを使用して低速または応答しないサービスの影響を制限すること、プライマリ サービスが利用できない場合に代替応答を提供するフォールバック ロジックが含まれます。たとえば、Web ページに読み込まれた動的コンテンツは、コンテンツが利用できない場合、または完全に非表示にする必要がある場合、デフォルト値に戻す必要があります。これにより、エラー メッセージを表示するよりも好ましいユーザー エクスペリエンスが得られます。
  potentialBenefits: Give users a workable experience despite ongoing partial issues
  pgVerified: false
  publishedToLearn: false
  publishedToAdvisor: no
  automationAvailable: no
  tags: null
  learnMoreLink:
    - name: Recommendations for self-healing and self-preservation
      url: "https://learn.microsoft.com/ja-jp/azure/well-architected/reliability/self-preservation#application-design-guidance-and-patterns-1"
- description: カスケード障害を防ぐために回路ブレーカーを実装する
  aprlGuid: c220efa2-c3c4-4b99-960c-4ae753c2e103
  recommendationTypeId: null
  recommendationControl: High Availability
  recommendationImpact: High
  recommendationResourceType: WellArchitected/Develop
  recommendationMetadataState: Active
  longDescription: |-
    サーキット ブレーカーは、分散システムにおける連鎖障害の防止に役立つ設計パターンです。アイデアは、各サービスの健全性を監視し、サービスが異常になったり応答しなくなったりした場合に、サービスへのリクエストの送信を停止することです。こうすることで、1 つのサービスの障害がシステムの残りの部分に影響を与えず、過負荷を回避してサービスをより迅速に回復できます。サーキット ブレーカーは、プライマリ サービスが利用できない場合に、キャッシュされたデータやデフォルト値を使用するなどのフォールバック ロジックをトリガーすることもできます。これにより、システムの信頼性と回復力が向上し、より良いユーザー エクスペリエンスが提供されます。
  potentialBenefits: Prevent cascading failures during reliability incidents
  pgVerified: false
  publishedToLearn: false
  publishedToAdvisor: no
  automationAvailable: no
  tags: null
  learnMoreLink:
    - name: Architecture Center - Circuit Breaker Pattern
      url: "https://learn.microsoft.com/ja-jp/azure/architecture/patterns/circuit-breaker"
